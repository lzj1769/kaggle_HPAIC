data("linnarsson")
library(SAVER)
data("linnarsson")
saver(linnarsson)
linnarsson
typeof(linnarsson)
head(linnarsson)
df <- saver(linnarsson)
df
res <- df$estimate
typeof(res)
library(doParallel)
cl <- makeCluster(4, outfile = "")
registerDoParallel(cl)
saver5 <- saver(linnarsson)
write.table(res, file = "res.txt", quote = FALSE, sep = "\t")
library(devtools)
devtools::install_github("timydaley/scABC", force = TRUE)
library(scABC)
data(testData, package = "scABC")
testData
View(testData)
bamfiles = paste0("SRX860", c(379:474, 187:282), "Chr12.bam")
peakfile = "../inst/extdata/chr12Peaks.bed"
peaks = selectPeaks(peakfile)
testData[["ForeGroundMatrix"]]
testData[["peaks"]]
install.packages("DrImpute")
?DrImpute
library(DrImpute)
?DrImpute
library(ComplexHeatmap)
install.packages("ComplexHeatmap")
source("https://bioconductor.org/biocLite.R")
biocLite("ComplexHeatmap")
library(ComplexHeatmap)
library(circlize)
mat = cbind(rbind(matrix(rnorm(16, -1), 4), matrix(rnorm(32, 1), 8)),
rbind(matrix(rnorm(24, 1), 4), matrix(rnorm(48, -1), 8)))
mat = mat[sample(nrow(mat), nrow(mat)), sample(ncol(mat), ncol(mat))]
Heatmap(mat)
Heatmap(mat, name = "foo", km = 2)
Heatmap(mat)
Heatmap(mat, name = "foo", km = 2)
mat
Heatmap(mat, name = "foo", split = rep(c("A", "B"), 6))
rep(c("A", "B"), 6)
pa = pam(mat, k = 3)
??pam
library(cluster)
pa = pam(mat, k = 3)
pa
Heatmap(mat, name = "foo", split = paste0("pam", pa$clustering))
?pam
prop.test(x, n, p = NULL, alternative = "two.sided",
correct = TRUE)
?prop.test
smokers <- c(83, 90, 129, 70)
patients <- c(86, 93, 136, 82)
prop.test(smokers, patients)
res <- prop.test(x = c(490, 400), n = c(500, 500))
res
table(walkby12)
prop.test(x = c(351, 41), n = c(605, 195))
?chisq.test
M <- as.table(rbind(c(762, 327, 468), c(484, 239, 477)))
dimnames(M) <- list(gender = c("F", "M"),
party = c("Democrat","Independent", "Republican"))
M
(Xsq <- chisq.test(M))
prop.test(x = c(351, 41), n = c(605, 195))
M <- as.table(rbind(c(762, 327, 468), c(484, 239, 477)))
dimnames(M) <- list(gender = c("F", "M"),
party = c("Democrat","Independent", "Republican"))
chisq.test(M)
M
x <- matrix(c(12, 5, 7, 7), ncol = 2)
chisq.test(x)
x
x <- matrix(c(351, 254, 41, 154), ncol = 2)
x
x <- matrix(c(351, 41, 254, 154), ncol = 2)
chisq.test(x)
x <- matrix(c(351, 61, 254, 154), ncol = 2)
chisq.test(x)
x <- matrix(c(351, 91, 254, 154), ncol = 2)
chisq.test(x)
x <- matrix(c(351, 200, 254, 154), ncol = 2)
chisq.test(x)
prop.test(x = c(351, 41), n = c(605, 354))
prop.test(x = c(351, 200), n = c(605, 354))
x <- rnorm(12)
z.test(x,sigma.x=1)
x = matrix(c(351, 41, 254, 154), ncol = 2)
chisq.test(x)
prop.test(x = c(351, 199), n = c(605, 354))
prop.test(x = c(351, 150), n = c(605, 354))
x = matrix(c(351, 150, 254, 204), ncol = 2)
chisq.test(x)
?prop.test
prop.test(x = c(351, 150), n = c(605, 300))
x = matrix(c(351, 150, 254, 150), ncol = 2)
chisq.test(x)
library(cicero)
install.packages("BiocManager")
install.packages("cowplot")
library(ggplot2)
install.packages("BiocManager")
BiocManager::install("cicero")
BiocManager::install(cole-trapnell-lab/cicero)
installed.packages()
BiocManager::install("cicero")
BiocManager::available()
BiocManager::install("netbiov")
install.packages("stringr")
BiocManager::install(cole-trapnell-lab/cicero)
BiocManager::install("cole-trapnell-lab/cicero")
install.packages("remotes")
BiocManager::install("cole-trapnell-lab/cicero")
library(cicero)
library(GenomeInfoDb)
library(Biobase)
install_bitbucket("greymonroe/genemodel")
install.packages("genomodel")
getwd()
setwd("~/Cluster/home/kaggle_HPAIC/model_selection/optimizer_selection")
getwd()
library(ggplot2)
library(cowplot)
library(gridExtra)
df_pretrained_SGD <- read.table("../../logs/ResNet50/ResNet50_PreTrained_SGD_KFold_0.log", header = TRUE)
View(df_pretrained_SGD)
df_pretrained_SGD <- read.table("../../logs/ResNet50/ResNet50_PreTrained_SGD_KFold_0.log",
header = TRUE,
sep = ",")
View(df_pretrained_SGD)
df_pretrained_SGD <- read.table("../../logs/ResNet50/ResNet50_PreTrained_SGD_KFold_0.log",
header = TRUE,
sep = ",")
df_pretrained_RMSprop <- read.table("../../logs/ResNet50/ResNet50_PreTrained_RMSprop_KFold_0.log",
header = TRUE,
sep = ",")
df_pretrained_Adagrad <- read.table("../../logs/ResNet50/ResNet50_PreTrained_Adagrad_KFold_0.log",
header = TRUE,
sep = ",")
df_pretrained_Adadelta <- read.table("../../logs/ResNet50/ResNet50_PreTrained_Adadelta_KFold_0.log",
header = TRUE,
sep = ",")
df_pretrained_Adam <- read.table("../../logs/ResNet50/ResNet50_PreTrained_Adam_KFold_0.log",
header = TRUE,
sep = ",")
df_pretrained_Adamax <- read.table("../../logs/ResNet50/ResNet50_PreTrained_Adamax_KFold_0.log",
header = TRUE,
sep = ",")
df_pretrained_Adam_AMSGrad <- read.table("../../logs/ResNet50/ResNet50_PreTrained_Adam_AMSGrad_KFold_0.log",
header = TRUE,
sep = ",")
df_pretrained_Adam_AMSGrad_LR_0 <- read.table("../../logs/ResNet50/ResNet50_PreTrained_Adam_AMSGrad_LR_0_KFold_0.log",
header = TRUE,
sep = ",")
df_pretrained_Adam_AMSGrad_LR_0.0001 <- read.table("../../logs/ResNet50/ResNet50_PreTrained_Adam_AMSGrad_LR_0.0001_KFold_0.log",
header = TRUE,
sep = ",")
View(df_pretrained_Adadelta)
View(df_pretrained_Adagrad)
View(df_pretrained_Adam)
df_pretrained_SGD$optimizer <- c(rep("SGD", nrow(df_pretrained_SGD)))
View(df_pretrained_SGD)
df_pretrained_RMSprop$optimizer <- c(rep("RMSprop", nrow(df_pretrained_SGD)))
df_pretrained_Adagrad$optimizer <- c(rep("Adagrad", nrow(df_pretrained_SGD)))
df_pretrained_Adadelta$optimizer <- c(rep("Adadelta", nrow(df_pretrained_SGD)))
df_pretrained_Adam$optimizer <- c(rep("Adam", nrow(df_pretrained_SGD)))
df_pretrained_Adamax$optimizer <- c(rep("Adamax", nrow(df_pretrained_SGD)))
df_pretrained_Adam_AMSGrad$optimizer <- c(rep("Adam_AMSGrad", nrow(df_pretrained_SGD)))
df_pretrained_Adam_AMSGrad_LR_0.0001$optimizer <- c(rep("Adam_AMSGrad_LR_0.0001", nrow(df_pretrained_SGD)))
df_pretrained_RMSprop$optimizer <- c(rep("RMSprop", nrow(df_pretrained_RMSprop)))
df_pretrained_Adagrad$optimizer <- c(rep("Adagrad", nrow(df_pretrained_Adagrad)))
df_pretrained_Adadelta$optimizer <- c(rep("Adadelta", nrow(df_pretrained_Adadelta)))
df_pretrained_Adam$optimizer <- c(rep("Adam", nrow(df_pretrained_Adam)))
df_pretrained_Adamax$optimizer <- c(rep("Adamax", nrow(df_pretrained_Adamax)))
df_pretrained_Adam_AMSGrad$optimizer <- c(rep("Adam_AMSGrad", nrow(df_pretrained_Adam_AMSGrad)))
df_pretrained_Adam_AMSGrad_LR_0.0001$optimizer <- c(rep("Adam_AMSGrad_LR_0.0001", nrow(df_pretrained_Adam_AMSGrad_LR_0.0001
df <- cbind.data.frame(df_pretrained_SGD, df_pretrained_RMSprop)
View(df_pretrained_SGD)
View(df_pretrained_RMSprop)
df <- rbind.data.frame(df_pretrained_SGD, df_pretrained_RMSprop)
df <- rbind.data.frame(df_pretrained_SGD,
df_pretrained_RMSprop,
df_pretrained_Adagrad)
df <- rbind.data.frame(df_pretrained_SGD,
df_pretrained_RMSprop,
df_pretrained_Adagrad,
df_pretrained_Adadelta,
df_pretrained_Adam,
df_pretrained_Adamax,
df_pretrained_Adam_AMSGrad,
df_pretrained_Adam_AMSGrad_LR_0.0001)
View(df_pretrained_Adam_AMSGrad_LR_0.0001)
df_pretrained_Adam_AMSGrad_LR_0.0001$optimizer <- c(rep("Adam_AMSGrad_LR_0.0001", nrow(df_pretrained_Adam_AMSGrad_LR_0.0001)))
df <- rbind.data.frame(df_pretrained_SGD,
df_pretrained_RMSprop,
df_pretrained_Adagrad,
df_pretrained_Adadelta,
df_pretrained_Adam,
df_pretrained_Adamax,
df_pretrained_Adam_AMSGrad,
df_pretrained_Adam_AMSGrad_LR_0.0001)
View(df)
View(df)
plot_acc <- ggplot(data = df, aes(x=epoch, y =acc, color = optimizer)) +
geom_line()
plot_acc
plot_acc <- ggplot(data = df, aes(x = epoch, y = acc, color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Training accuracy") +
theme(legend.title = element_blank())
plot_loss <- ggplot(data = df, aes(x = epoch, y = loss, color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Training loss") +
theme(legend.title = element_blank())
plot_val_acc <- ggplot(data = df, aes(x = epoch, y = val_acc, color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Validation accuracy") +
theme(legend.title = element_blank())
plot_val_loss <- ggplot(data = df, aes(x = epoch, y = val_loss, color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Validation loss") +
theme(legend.title = element_blank())
p <- plot_grid(plot_acc, plot_loss, plot_val_acc, plot_val_loss, nrow = 2, ncol = 2)
pdf("pre_trained.pdf", height = 8, width = 8)
print(p)
dev.off()
plot_acc <- ggplot(data = df, aes(x = epoch, y = acc, color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Training accuracy") +
theme(legend.title = element_blank(),
legend.position = (0.8, 0.6))
plot_acc <- ggplot(data = df, aes(x = epoch, y = acc, color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Training accuracy") +
theme(legend.title = element_blank(),
legend.position = c(0.8, 0.6))
p <- plot_grid(plot_acc, plot_loss, plot_val_acc, plot_val_loss, nrow = 2, ncol = 2)
pdf("pre_trained.pdf", height = 8, width = 8)
print(p)
dev.off()
plot_acc <- ggplot(data = df, aes(x = epoch, y = acc, color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Training accuracy") +
theme(legend.title = element_blank(),
legend.position = c(0.8, 0.3),
legend.text = element_text(size = 1))
p <- plot_grid(plot_acc, plot_loss, plot_val_acc, plot_val_loss, nrow = 2, ncol = 2)
pdf("pre_trained.pdf", height = 8, width = 8)
print(p)
dev.off()
plot_acc <- ggplot(data = df, aes(x = epoch, y = acc, color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Training accuracy") +
theme(legend.title = element_blank(),
legend.position = c(0.8, 0.3),
legend.text = element_text(size = 10))
plot_acc
plot_acc <- ggplot(data = df, aes(x = epoch, y = acc, color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Training accuracy") +
theme(legend.title = element_blank(),
legend.position = c(0.7, 0.3),
legend.text = element_text(size = 10))
plot_acc
plot_acc <- ggplot(data = df, aes(x = epoch, y = acc, color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Training accuracy") +
theme(legend.title = element_blank(),
legend.position = c(0.7, 0.1),
legend.text = element_text(size = 10))
plot_acc
plot_acc <- ggplot(data = df, aes(x = epoch, y = acc, color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Training accuracy") +
theme(legend.title = element_blank(),
legend.position = c(0.7, 0.2),
legend.text = element_text(size = 10))
plot_acc
p <- plot_grid(plot_acc, plot_loss, plot_val_acc, plot_val_loss, nrow = 2, ncol = 2)
pdf("pre_trained.pdf", height = 12, width = 12)
print(p)
dev.off()
plot_acc <- ggplot(data = df, aes(x = epoch, y = acc, color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Training accuracy") +
theme(legend.title = element_blank(),
legend.position = c(0.6, 0.2),
legend.text = element_text(size = 10))
p <- plot_grid(plot_acc, plot_loss, plot_val_acc, plot_val_loss, nrow = 2, ncol = 2)
pdf("pre_trained.pdf", height = 12, width = 12)
print(p)
dev.off()
plot_acc <- ggplot(data = df, aes(x = epoch, y = acc, color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Training accuracy") +
theme(legend.title = element_blank(),
legend.position = c(0.6, 0.2),
legend.text = element_text(size = 10))
plot_loss <- ggplot(data = df, aes(x = epoch, y = loss, color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Training loss") +
theme(legend.title = element_blank(),
legend.position = c(0.6, 0.8),
legend.text = element_text(size = 10))
plot_val_acc <- ggplot(data = df, aes(x = epoch, y = val_acc, color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Validation accuracy") +
theme(legend.title = element_blank(),
legend.position = c(0.6, 0.2),
legend.text = element_text(size = 10))
plot_val_loss <- ggplot(data = df, aes(x = epoch, y = val_loss, color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Validation loss") +
theme(legend.title = element_blank(),
legend.position = c(0.6, 0.8),
legend.text = element_text(size = 10))
p <- plot_grid(plot_acc, plot_loss, plot_val_acc, plot_val_loss, nrow = 2, ncol = 2)
pdf("pre_trained.pdf", height = 12, width = 12)
print(p)
dev.off()
plot_acc <- ggplot(data = df, aes(x = epoch, y = acc, color = optimizer, shape = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Training accuracy") +
theme(legend.title = element_blank(),
legend.position = c(0.6, 0.2),
legend.text = element_text(size = 10))
p <- plot_grid(plot_acc, plot_loss, plot_val_acc, plot_val_loss, nrow = 2, ncol = 2)
pdf("pre_trained.pdf", height = 12, width = 12)
print(p)
dev.off()
plot_acc <- ggplot(data = df, aes(x = epoch, y = acc, color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Training accuracy") +
theme(legend.title = element_blank(),
legend.position = c(0.6, 0.2),
legend.text = element_text(size = 10))
plot_loss <- ggplot(data = df, aes(x = epoch, y = loss, color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Training loss") +
theme(legend.title = element_blank(),
legend.position = c(0.6, 0.8),
legend.text = element_text(size = 10))
plot_val_acc <- ggplot(data = df, aes(x = epoch, y = val_acc, color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Validation accuracy") +
theme(legend.title = element_blank(),
legend.position = c(0.6, 0.2),
legend.text = element_text(size = 10))
plot_val_loss <- ggplot(data = df, aes(x = epoch, y = val_loss, color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Validation loss") +
theme(legend.title = element_blank(),
legend.position = c(0.6, 0.8),
legend.text = element_text(size = 10))
p <- plot_grid(plot_acc, plot_loss, plot_val_acc, plot_val_loss, nrow = 2, ncol = 2)
pdf("pre_trained.pdf", height = 12, width = 12)
print(p)
dev.off()
plot_val_loss <- ggplot(data = df, aes(x = epoch, y = -log(val_loss), color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Validation loss") +
theme(legend.title = element_blank(),
legend.position = c(0.6, 0.8),
legend.text = element_text(size = 10))
p <- plot_grid(plot_acc, plot_loss, plot_val_acc, plot_val_loss, nrow = 2, ncol = 2)
pdf("pre_trained.pdf", height = 12, width = 12)
print(p)
dev.off()
plot_val_loss <- ggplot(data = df, aes(x = epoch, y = log(val_loss), color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Validation loss") +
theme(legend.title = element_blank(),
legend.position = c(0.6, 0.8),
legend.text = element_text(size = 10))
p <- plot_grid(plot_acc, plot_loss, plot_val_acc, plot_val_loss, nrow = 2, ncol = 2)
pdf("pre_trained.pdf", height = 12, width = 12)
print(p)
dev.off()
plot_acc <- ggplot(data = df, aes(x = epoch, y = acc, color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Training accuracy") +
theme(legend.title = element_blank(),
legend.position = c(0.6, 0.2),
legend.text = element_text(size = 10))
plot_loss <- ggplot(data = df, aes(x = epoch, y = -log(loss), color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Training loss") +
theme(legend.title = element_blank(),
legend.position = c(0.6, 0.8),
legend.text = element_text(size = 10))
plot_val_acc <- ggplot(data = df, aes(x = epoch, y = val_acc, color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Validation accuracy") +
theme(legend.title = element_blank(),
legend.position = c(0.6, 0.2),
legend.text = element_text(size = 10))
plot_val_loss <- ggplot(data = df, aes(x = epoch, y = log(val_loss), color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Validation loss") +
theme(legend.title = element_blank(),
legend.position = c(0.6, 0.8),
legend.text = element_text(size = 10))
p <- plot_grid(plot_acc, plot_loss, plot_val_acc, plot_val_loss, nrow = 2, ncol = 2)
pdf("pre_trained.pdf", height = 12, width = 12)
print(p)
dev.off()
plot_acc <- ggplot(data = df, aes(x = epoch, y = acc, color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Training accuracy") +
theme(legend.title = element_blank(),
legend.position = c(0.6, 0.2),
legend.text = element_text(size = 10))
plot_loss <- ggplot(data = df, aes(x = epoch, y = loss, color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Training loss") +
theme(legend.title = element_blank(),
legend.position = c(0.6, 0.8),
legend.text = element_text(size = 10))
plot_val_acc <- ggplot(data = df, aes(x = epoch, y = val_acc, color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Validation accuracy") +
theme(legend.title = element_blank(),
legend.position = c(0.6, 0.2),
legend.text = element_text(size = 10))
plot_val_loss <- ggplot(data = df, aes(x = epoch, y = val_loss, color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Validation loss") +
theme(legend.title = element_blank(),
legend.position = c(0.6, 0.8),
legend.text = element_text(size = 10))
p <- plot_grid(plot_acc, plot_loss, plot_val_acc, plot_val_loss, nrow = 2, ncol = 2)
pdf("pre_trained.pdf", height = 12, width = 12)
print(p)
dev.off()
png("pre_trained.png", height = 12, width = 12)
print(p)
dev.off()
?png
png("pre_trained.png", height = 480, width = 480)
print(p)
dev.off()
png("pre_trained.png", height = 12, width = 12, units = "in")
print(p)
dev.off()
png("pre_trained.png", height = 12, width = 12, units = "in", res = 300)
print(p)
dev.off()
df_fromscratch_SGD <- read.table("ResNet50_FromScratch_SGD_KFold_0.log",
header = TRUE,
sep = ",")
df_fromscratch_SGD <- read.table("ResNet50_FromScratch_SGD_KFold_0.log",
header = TRUE,
sep = ",")
df_fromscratch_RMSprop <- read.table("ResNet50_FromScratch_RMSprop_KFold_0.log",
header = TRUE,
sep = ",")
df_fromscratch_Adagrad <- read.table("ResNet50_FromScratch_Adagrad_KFold_0.log",
header = TRUE,
sep = ",")
df_fromscratch_Adadelta <- read.table("ResNet50_FromScratch_Adadelta_KFold_0.log",
header = TRUE,
sep = ",")
df_fromscratch_Adam <- read.table("ResNet50_FromScratch_Adam_KFold_0.log",
header = TRUE,
sep = ",")
df_fromscratch_Adamax <- read.table("ResNet50_FromScratch_Adamax_KFold_0.log",
header = TRUE,
sep = ",")
df_fromscratch_Adam_AMSGrad <- read.table("ResNet50_FromScratch_Adam_AMSGrad_KFold_0.log",
header = TRUE,
sep = ",")
df_fromscratch_Adam_AMSGrad_LR_0.0001 <- read.table("ResNet50_FromScratch_Adam_AMSGrad_LR_0.0001_KFold_0.log",
header = TRUE,
sep = ",")
View(df_fromscratch_RMSprop)
?seq
df_fromscratch_SGD <- df_fromscratch_SGD[:40, ]
df_fromscratch_SGD <- df_fromscratch_SGD[:40]
df_fromscratch_SGD <- df_fromscratch_SGD[0:40, ]
df_fromscratch_RMSprop <- df_fromscratch_RMSprop[0:40, ]
df_fromscratch_Adagrad <- df_fromscratch_Adagrad[0:40, ]
df_fromscratch_Adadelta <- df_fromscratch_Adadelta[0:40, ]
df_fromscratch_Adam <- df_fromscratch_Adam[0:40, ]
df_fromscratch_Adamax <- df_fromscratch_Adamax[0:40, ]
df_fromscratch_Adam_AMSGrad <- df_fromscratch_Adam_AMSGrad[0:40, ]
df_fromscratch_Adam_AMSGrad_LR_0.0001 <- df_fromscratch_Adam_AMSGrad_LR_0.0001[0:40, ]
View(df_fromscratch_Adagrad)
df_fromscratch_SGD$epoch <- sep(0, 40)
df_fromscratch_SGD$epoch <- seq(0, 40)
df_fromscratch_SGD$epoch <- seq(0, 39)
df_fromscratch_RMSprop$epoch <- seq(0, 39)
df_fromscratch_Adagrad$epoch <- seq(0, 39)
df_fromscratch_Adadelta$epoch <- seq(0, 39)
df_fromscratch_Adam$epoch <- seq(0, 39)
df_fromscratch_Adamax$epoch <- seq(0, 39)
df_fromscratch_Adam_AMSGrad$epoch <- seq(0, 39)
df_fromscratch_Adam_AMSGrad_LR_0.0001$epoch <- seq(0, 39)
df_fromscratch_SGD$optimizer <- c(rep("SGD", nrow(df_fromscratch_SGD)))
df_fromscratch_RMSprop$optimizer <- c(rep("RMSprop", nrow(df_fromscratch_RMSprop)))
df_fromscratch_Adagrad$optimizer <- c(rep("Adagrad", nrow(df_fromscratch_Adagrad)))
df_fromscratch_Adadelta$optimizer <- c(rep("Adadelta", nrow(df_fromscratch_Adadelta)))
df_fromscratch_Adam$optimizer <- c(rep("Adam", nrow(df_fromscratch_Adam)))
df_fromscratch_Adamax$optimizer <- c(rep("Adamax", nrow(df_fromscratch_Adamax)))
df_fromscratch_Adam_AMSGrad$optimizer <- c(rep("Adam_AMSGrad", nrow(df_fromscratch_Adam_AMSGrad)))
df_fromscratch_Adam_AMSGrad_LR_0.0001$optimizer <- c(rep("Adam_AMSGrad_LR_0.0001", nrow(df_fromscratch_Adam_AMSGrad_LR_0.0001)))
df <- rbind.data.frame(df_fromscratch_SGD,
df_fromscratch_RMSprop,
df_fromscratch_Adagrad,
df_fromscratch_Adadelta,
df_fromscratch_Adam,
df_fromscratch_Adamax,
df_fromscratch_Adam_AMSGrad,
df_fromscratch_Adam_AMSGrad_LR_0.0001)
plot_acc <- ggplot(data = df, aes(x = epoch, y = acc, color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Training accuracy") +
theme(legend.title = element_blank(),
legend.position = c(0.6, 0.2),
legend.text = element_text(size = 10))
plot_loss <- ggplot(data = df, aes(x = epoch, y = loss, color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Training loss") +
theme(legend.title = element_blank(),
legend.position = c(0.6, 0.8),
legend.text = element_text(size = 10))
plot_val_acc <- ggplot(data = df, aes(x = epoch, y = val_acc, color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Validation accuracy") +
theme(legend.title = element_blank(),
legend.position = c(0.6, 0.2),
legend.text = element_text(size = 10))
plot_val_loss <- ggplot(data = df, aes(x = epoch, y = val_loss, color = optimizer)) +
geom_line() + xlab("Epochs") + ylab("Validation loss") +
theme(legend.title = element_blank(),
legend.position = c(0.6, 0.8),
legend.text = element_text(size = 10))
p <- plot_grid(plot_acc, plot_loss, plot_val_acc, plot_val_loss, nrow = 2, ncol = 2)
png("from_scratch.png", height = 12, width = 12, units = "in", res = 300)
print(p)
dev.off()
